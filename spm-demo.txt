Admin@Admin-pc MINGW64 ~/Desktop
$ git
usage: git [--version] [--help] [-C <path>] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.

Admin@Admin-pc MINGW64 ~/Desktop
$ cd SPMDemo

Admin@Admin-pc MINGW64 ~/Desktop/SPMDemo
$ init myrepo
bash: init: command not found

Admin@Admin-pc MINGW64 ~/Desktop/SPMDemo
$ cd ..

Admin@Admin-pc MINGW64 ~/Desktop
$ init myrepo
bash: init: command not found

Admin@Admin-pc MINGW64 ~/Desktop
$ git init myrepo
Initialized empty Git repository in C:/Users/Admin/Desktop/myrepo/.git/

Admin@Admin-pc MINGW64 ~/Desktop
$ cd rani

Admin@Admin-pc MINGW64 ~/Desktop/rani
$ echo "hello">> hello.txt

Admin@Admin-pc MINGW64 ~/Desktop/rani
$ echo "My Demo">>branchdemo.txt

Admin@Admin-pc MINGW64 ~/Desktop/rani
$ git log --online --graph --decorate --all
fatal: Not a git repository (or any of the parent directories): .git

Admin@Admin-pc MINGW64 ~/Desktop/rani
$ git show -branch
fatal: Not a git repository (or any of the parent directories): .git

Admin@Admin-pc MINGW64 ~/Desktop/rani
$ git show-branch
fatal: Not a git repository (or any of the parent directories): .git

Admin@Admin-pc MINGW64 ~/Desktop/rani
$ git init myrepo
Initialized empty Git repository in C:/Users/Admin/Desktop/rani/myrepo/.git/

Admin@Admin-pc MINGW64 ~/Desktop/rani
$ cd myrepo

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (master)
$ echo "My Demo">>branchdemo.txt

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (master)
$ git log --online --graph --decorate --all
fatal: your current branch 'master' does not have any commits yet

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (master)
$ git show-branch
No revs to be shown.

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (master)
$ git add branchdemo.txt
warning: LF will be replaced by CRLF in branchdemo.txt.
The file will have its original line endings in your working directory.

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (master)
$ git commit -a -m "first"
[master (root-commit) bffd2e2] first
 1 file changed, 1 insertion(+)
 create mode 100644 branchdemo.txt

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (master)
$ git branch utu

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (master)
$ git checkout utu
Switched to branch 'utu'

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (utu)
$ ls
branchdemo.txt

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (utu)
$ git log --online --graph --decorate --all
fatal: unrecognized argument: --online

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (utu)
$ git log --oneline --graph --decorate --all
* bffd2e2 (HEAD -> utu, master) first

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (utu)
$ echo "lets see about branching" >> br.txt

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (utu)
$ git add br.txt
warning: LF will be replaced by CRLF in br.txt.
The file will have its original line endings in your working directory.

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (utu)
$ git commit  -m "second"
[utu e54e445] second
 1 file changed, 1 insertion(+)
 create mode 100644 br.txt

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (utu)
$ git checkout master
Switched to branch 'master'

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (master)
$ git chechout -b srimca
git: 'chechout' is not a git command. See 'git --help'.

The most similar command is
        checkout

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (master)
$ git checkout -b srimca
Switched to a new branch 'srimca'

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (srimca)
$ git log --oneline --graph --decorate --all
* e54e445 (utu) second
* bffd2e2 (HEAD -> srimca, master) first

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (srimca)
$ echo "master of computer application" >> mca.txt

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (srimca)
$ git add mca,txt
fatal: pathspec 'mca,txt' did not match any files

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (srimca)
$ git add mca.txt
warning: LF will be replaced by CRLF in mca.txt.
The file will have its original line endings in your working directory.

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (srimca)
$ git commit -m "mca"
[srimca 2dcf1e0] mca
 1 file changed, 1 insertion(+)
 create mode 100644 mca.txt

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (srimca)
$ git checkout master
Switched to branch 'master'

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (master)
$ git merge srimca
Updating bffd2e2..2dcf1e0
Fast-forward
 mca.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 mca.txt

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (master)
$ git log --oneline --graph --decorate --all
* 2dcf1e0 (HEAD -> master, srimca) mca
| * e54e445 (utu) second
|/
* bffd2e2 first

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (master)
$ git checkout utu
Switched to branch 'utu'

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (utu)
$ ls
br.txt  branchdemo.txt

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (utu)
$ echo "Uka Tarsadia University" >> br.txt

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (utu)
$ cat br.txt
lets see about branching
Uka Tarsadia University

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (utu)
$ git add br.txt
warning: LF will be replaced by CRLF in br.txt.
The file will have its original line endings in your working directory.

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (utu)
$ git commit -m "last"
[utu 20a4710] last
 1 file changed, 1 insertion(+)

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (utu)
$ git checkout master
Switched to branch 'master'

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (master)
$ git merge utu
Merge made by the 'recursive' strategy.
 br.txt | 2 ++
 1 file changed, 2 insertions(+)
 create mode 100644 br.txt

Admin@Admin-pc MINGW64 ~/Desktop/rani/myrepo (master)
$ git log --oneline --graph --decorate --all
*   dfedf3b (HEAD -> master) Merge branch 'utu'
|\
| * 20a4710 (utu) last
| * e54e445 second
* | 2dcf1e0 (srimca) mca
|/
* bffd2e2 first

